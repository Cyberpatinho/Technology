package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"fmt"

	"github.com/Cyberpatinho/Technology/GraphQL/1-Beginning/graph/model"
)

// CreateMenu is the resolver for the createMenu field.
func (r *mutationResolver) CreateMenu(ctx context.Context, input model.NewMenu) (*model.Menu, error) {
	menu, err := r.MenuDB.Create(input.Name, *input.Description)
	if err != nil {
		return nil, err
	}
	return &model.Menu{
		ID:          menu.Id,
		Name:        menu.Name,
		Description: &menu.Description,
	}, nil
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.NewItem) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: CreateItem - createItem"))
}

// Menus is the resolver for the menus field.
func (r *queryResolver) Menus(ctx context.Context) ([]*model.Menu, error) {
	panic(fmt.Errorf("not implemented: Menus - menus"))
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	panic(fmt.Errorf("not implemented: Items - items"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
